{"version":3,"sources":["webpack:///./src/app/services/predstave.service.ts","webpack:///./src/app/services/slike.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAA2C;AAEZ;AACoB;AACD;AAGA;AAKlD;IAME,0BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAJ7B,cAAS,GAAyB,IAAI,4CAAO,EAAE,CAAC;QAC/C,SAAI,GAAG,gBAAgB,CAAC;QACxB,WAAM,GAAG,IAAI,gEAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;IAEjC,CAAC;IAEzC,uCAAY,GAAZ,UAAa,IAAY,EAAE,IAAI;QAE7B,IAAI,MAAM,GAAG,IAAI,+DAAU,EAAE,CAAC;QAC9B,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAChD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEhD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAG,EAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,CAA0C,CAAC;IACpH,CAAC;IAED,8CAAmB,GAAnB,UAAoB,EAAU;QAC5B,oCAAoC;QACpC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAI,IAAI,CAAC,IAAI,SAAI,EAAI,CAA0B,CAAC;IACtE,CAAC;IApBU,gBAAgB;QAH5B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAO0B,+DAAU;OANzB,gBAAgB,CAqB5B;IAAD,uBAAC;CAAA;AArB4B;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZc;AAEQ;AACpB;AACmB;AAGA;AAKlD;IAMI,sBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAJ7B,UAAK,GAAqB,IAAI,4CAAO,EAAE,CAAC;QACvC,SAAI,GAAG,YAAY,CAAC;QACpB,WAAM,GAAG,IAAI,gEAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;IAEjC,CAAC;IAEzC,+BAAQ,GAAR,UAAS,IAAY,EAAE,IAAI;QAEzB,IAAI,MAAM,GAAG,IAAI,+DAAU,EAAE,CAAC;QAC9B,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAChD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEhD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAG,EAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,CAAsC,CAAC;IAChH,CAAC;IAfQ,YAAY;QAHxB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAO4B,+DAAU;OAN3B,YAAY,CA2CtB;IAAD,mBAAC;CAAA;AA3CsB","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Predstava } from 'src/app/model/predstava';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { HttpResponse } from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PredstaveService {\n\n  public repertoar: Subject<Predstava[]> = new Subject();\n  private path = '/api/predstava';\n  private header = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n  constructor(private http: HttpClient) { }\n\n  getPredstave(page: number, size ): Observable<HttpResponse<Predstava[]>> {\n\n    let params = new HttpParams();\n    params = params.append('page', page.toString());\n    params = params.append('size', size.toString());\n\n    return this.http.get(this.path,  {params: params, observe: 'response' }) as Observable<HttpResponse<Predstava[]>>;\n  }\n\n  getPredstavaOsobeId(id: number): Observable<Predstava> {\n    // console.log('JEDAN USER ID', id);\n    return this.http.get(`${this.path}/${id}`) as Observable<Predstava>;\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Slike } from 'src/app/model/slike';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { Subject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { HttpParams } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SlikeService {\r\n\r\n    public slike: Subject<Slike[]> = new Subject();\r\n    private path = '/api/slike';\r\n    private header = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getSlika(page: number, size ): Observable<HttpResponse<Slike[]>> {\r\n\r\n      let params = new HttpParams();\r\n      params = params.append('page', page.toString());\r\n      params = params.append('size', size.toString());\r\n\r\n      return this.http.get(this.path,  {params: params, observe: 'response' }) as Observable<HttpResponse<Slike[]>>;\r\n    }\r\n\r\n    // getSlike(): Observable<Slike[]> {\r\n    //   return this.http.get(this.path) as Observable<Slike[]>;\r\n    // }\r\n\r\n  //   getCompany(id: number): Observable<Company> {\r\n  //     // console.log('JEDAN USER ID', id);\r\n  //     return this.http.get(`${this.path}/${id}`) as Observable<Company>;\r\n  //   }\r\n\r\n  //   deleteCompany(company: Company) {\r\n  //     return this.http.delete(`${this.path}/${company.id}`);\r\n  //   }\r\n\r\n  //   saveCompany(company: Company): Observable<Company> {\r\n  //     if (company.id === undefined) {\r\n  //       return this.http.post(this.path, company, {headers: this.header}) as Observable<Company>;\r\n  //     }\r\n  //     else {\r\n  //       return this.http.put(`${this.path}/${company.id}`, company, {headers: this.header}) as Observable<Company>;\r\n  //     }\r\n  //   }\r\n\r\n  //   getCompanyByName(name: string): Observable<Company[]>  {\r\n  //    return this.http.get(this.path + '?name=' + name) as Observable<Company[]>;\r\n  //   }\r\n  // }\r\n  }\r\n\r\n\r\n"],"sourceRoot":""}